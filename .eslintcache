[{"/Users/omarbaldi/Desktop/Pokedex/src/index.js":"1","/Users/omarbaldi/Desktop/Pokedex/src/App.js":"2","/Users/omarbaldi/Desktop/Pokedex/src/components/Inputbox.js":"3","/Users/omarbaldi/Desktop/Pokedex/src/components/Pokemon.js":"4","/Users/omarbaldi/Desktop/Pokedex/src/components/PokemonInfo.js":"5","/Users/omarbaldi/Desktop/Pokedex/src/components/Chart.js":"6"},{"size":248,"mtime":1611432419880,"results":"7","hashOfConfig":"8"},{"size":2712,"mtime":1612112339214,"results":"9","hashOfConfig":"8"},{"size":391,"mtime":1612112339210,"results":"10","hashOfConfig":"8"},{"size":4410,"mtime":1612112339210,"results":"11","hashOfConfig":"8"},{"size":6169,"mtime":1612112339211,"results":"12","hashOfConfig":"8"},{"size":2190,"mtime":1612112339209,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"3couak",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/omarbaldi/Desktop/Pokedex/src/index.js",[],["29","30"],"/Users/omarbaldi/Desktop/Pokedex/src/App.js",[],"/Users/omarbaldi/Desktop/Pokedex/src/components/Inputbox.js",[],"/Users/omarbaldi/Desktop/Pokedex/src/components/Pokemon.js",["31","32"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { Card, CardContent, Typography, Button, Box, IconButton, Chip } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport RotateIcon from '@material-ui/icons/RotateRight';\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 350,\n        minHeight: 400,\n        position: 'relative'\n    },\n    button: {\n        position: 'absolute',\n        bottom: 0,\n        borderRadius: 0,\n        border: 'none',\n        borderTop: '1px solid lightgrey',\n        color: '#222',\n        '&:hover': {\n            background: \"lightgrey\",\n        },\n    },\n    iconRotate: {\n        position: 'absolute',\n        top: 0,\n        right: 10\n    },\n    chipGroup: {\n        marginBottom: 20,\n        marginTop: 20,\n        '& > *': {\n            marginRight: 5,\n        },\n    }\n});\n\nexport default function Pokemon(props) {\n    const classes = useStyles();\n    const { name } = props.pokemon;\n    const [pokemonData, setPokemonData] = useState();\n    const [pokemonBack, setPokemonBack] = useState(false);\n\n    const getPokemon = async () => {\n        const response = await axios({\n          method: 'GET',\n          url: `https://pokeapi.co/api/v2/pokemon/${name}`\n        })\n        \n        return response.data;\n    } \n\n    const getPokemonDescription = async (currentURL) => {\n        const response = await axios({\n            method: 'GET',\n            url: currentURL\n        })\n\n        const { flavor_text_entries: allLanguageDescriptions } = response.data;\n        const descriptionEN = allLanguageDescriptions.find((x => x.language.name === 'en'));\n          \n        return descriptionEN.flavor_text\n    };\n    \n    useEffect(() => {\n        (async () => {\n            const pokemonData = await getPokemon();\n            const pokemonDescription = await getPokemonDescription(pokemonData.species.url);\n            pokemonData[\"pokemonDescription\"] = pokemonDescription;\n            setPokemonData(pokemonData);\n        })();\n    }, [name])\n\n    return (\n        <Box mt={3} mr={2} ml={2} mb={5}>\n            {\n                pokemonData &&\n                <Card className={classes.root}>\n                    <img src={!pokemonBack ? pokemonData.sprites.front_default : pokemonData.sprites.back_default}></img>\n                    <CardContent>\n                        <IconButton className={classes.iconRotate} onClick={() => setPokemonBack((value) => !value)}>\n                            <RotateIcon />\n                        </IconButton>\n                        <Typography variant=\"h4\">\n                            #{pokemonData.id}\n                        </Typography>\n                        <Typography gutterBottom variant=\"h5\">\n                            { \n                                `\n                                    ${name.split('')[0].toUpperCase() + name.slice(1)}\n                                ` \n                            }\n                        </Typography>\n                        <div className={classes.chipGroup}>\n                            {\n                                pokemonData.types.map((type, index) => {\n                                    return (\n                                        <Chip key={index} label={type.type.name} mr={2}/>\n                                    )\n                                })\n                            }\n                        </div>\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                            {pokemonData.pokemonDescription}\n                        </Typography>\n                    </CardContent>\n                    <Link \n                        to={{\n                            pathname: `/pokemon/${name}`,\n                            state: {info: pokemonData}\n                        }}\n                    >\n                        <Button\n                            size=\"large\"\n                            className={classes.button}\n                            fullWidth={true}\n                            variant=\"outlined\" \n                            to={{\n                                pathname: `/pokemon/${name}`,\n                                state: {info: pokemonData}\n                            }}\n                        >\n                            View info\n                        </Button>\n                    </Link>\n                </Card>\n            }\n        </Box>\n    )\n}\n\n\n","/Users/omarbaldi/Desktop/Pokedex/src/components/PokemonInfo.js",["33"],"import React, { useState, useEffect } from 'react';\nimport { useLocation } from \"react-router-dom\";\nimport { Drawer, Card } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    root: {\n      minWidth: 600,\n    }\n  });\n\nexport default function About(props) {\n\n    const classes = useStyles();\n    const data = useLocation();\n    const { info: pokemonInfo } = data.state;\n    const [showSidebar, setShowSideBar] = useState(false);\n\n\n    useEffect(() => {\n        changeSideBarValue(true);\n    }, [pokemonInfo]);\n\n    const changeSideBarValue = (open) => {\n        setShowSideBar(open);\n\n        if (!open) {\n            return props.history.goBack();\n        }\n    };\n\n    return (\n        <Drawer open={showSidebar} onClose={() => changeSideBarValue(false)}>\n            <Card className={classes.root}>\n                <h4>Show pokemon info for {pokemonInfo.name} </h4>\n                <ul>\n                    {\n                        pokemonInfo.abilities.map((ability, index) => {\n                            return (\n                                <li key={index}>\n                                    {ability.ability.name}\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n            </Card>\n        </Drawer>\n    )\n}\n","/Users/omarbaldi/Desktop/Pokedex/src/components/Chart.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":73,"column":8,"nodeType":"40","endLine":73,"endColumn":14,"suggestions":"41"},{"ruleId":"42","severity":1,"message":"43","line":80,"column":21,"nodeType":"44","endLine":80,"endColumn":116},{"ruleId":"38","severity":1,"message":"45","line":22,"column":8,"nodeType":"40","endLine":22,"endColumn":21,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPokemon'. Either include it or remove the dependency array.","ArrayExpression",["49"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'changeSideBarValue'. Either include it or remove the dependency array.",["50"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},{"desc":"53","fix":"54"},"Update the dependencies array to be: [getPokemon, name]",{"range":"55","text":"56"},"Update the dependencies array to be: [changeSideBarValue, pokemonInfo]",{"range":"57","text":"58"},[2097,2103],"[getPokemon, name]",[558,571],"[changeSideBarValue, pokemonInfo]"]